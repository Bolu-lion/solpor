@page "/admin"
@using SolutionPortalBeta.Shared;
@inject NavigationManager _nav
@*@using SolutionPortal.Shared*@
@inject HttpClient _httpClient

<div class="admin-main">
    <Sidebar />
    <section>
        <div class="stats">
            <div class="total" @onclick="viewTotalComplaints">
                <span class="material-symbols-outlined"> analytics </span>
                <div class="middle">
                    <div class="left">
                        <h1>Total Complaints</h1>
                        <h3>@complaintList.Count() </h3>
                    </div>
                    <small>Last 24 Hours</small>
                </div>
            </div>
            <div class="resolved" @onclick="viewTotalComplaints">
                <span class="material-symbols-outlined"> done </span>
                <div class="middle">
                    <div class="left">
                        <h1>Resolved Complaints</h1>
                        <h3>@complaintList.Count(t => t.IsCompleted)</h3>
                    </div>
                    <small class="text-muted">Last 24 Hours</small>
                </div>
            </div>
            <div class="unresolved" @onclick="viewTotalComplaints">
                <span class="material-symbols-outlined"> priority_high </span>
                <div class="middle">
                    <div class="left">
                        <h1>Unresolved Complaints</h1>
                        <h3>@complaintList.Count(t => !t.IsCompleted)</h3>
                    </div>
                    <small class="text-muted">Last 24 Hours</small>
                </div>
            </div>
        </div>
        <div class="complaint-list">
            <h1>Recent Complaints</h1>
            <div class="c-list">
                @if (complaintList is null)
                {
                    <h3>Loading...</h3>
                }
                else{
                    @foreach (var p in complaintList.OrderByDescending(p => p.Id).Take(5))
                    {
                        <div class="c-list-item" @onclick="() => setModal( p.Id, p.Title, p.Description, p.DateCreated, p.IsCompleted, p.Response )">
                            <div class="t-row">
                                <h2>@p.Title</h2>
                                <small>@p.DateCreated</small>
                            </div>
                            <span class="status">@CheckStatus(p.IsCompleted)</span>
                        </div>
                    }
                }
                @if (viewModal)
                {
                    <ViewComplaint CId="@ComplaintId" Title="@ComplaiantTitle" Description="@ComplaintDescription" Date="@ComplaintDate" Status="@CompliantStatus" Response="@CompliantResponse"/>
                }
            </div><a href="complaintlist">Show All</a>
        </div>
    </section>
</div>

@code {
    public bool viewModal = false;
    public int ComplaintId {get; set;}
    public string ComplaiantTitle {get; set;}
    public string ComplaintDescription {get; set;}
    public DateTime ComplaintDate {get; set;}
    public bool CompliantStatus {get; set;}
    public string CompliantResponse {get; set;}
    public void setModal(int Id, string ModalTitle, string ModalDescription, DateTime ModalDate, bool ModalStatus, string ModalResponse)
    {
        viewModal = !viewModal;
        ComplaintId = Id;
        ComplaiantTitle = ModalTitle;
        ComplaintDescription = ModalDescription;
        ComplaintDate= ModalDate;
        CompliantStatus = ModalStatus ;
        CompliantResponse = ModalResponse;
    }
    List<UserCompliantModel> complaintList = new List<UserCompliantModel>();
    protected override async Task OnInitializedAsync()
    {
        var response = await _httpClient.GetAsync("api/UserComplaint/");
        complaintList = await response.Content.ReadFromJsonAsync<List<UserCompliantModel>>();
    }
    private string CheckStatus(bool Status)
    {
        if (Status)
        {
            return "Resolved";
        }
        else
        {
            return "Pending";
        }
    }
    public void moveto()
    {
        _nav.NavigateTo("faqlist");
    }
    public void viewComplaint()
    {
        _nav.NavigateTo("viewcomplaint");
    }
    public async Task GetCompliantsByDate(DateTime SelectedDate)
    {
        var response = await _httpClient.GetAsync("api/UserComplaint/" + SelectedDate);
        complaintList = await response.Content.ReadFromJsonAsync<List<UserCompliantModel>>();
    }
    public void viewTotalComplaints()
    {
        _nav.NavigateTo("complaintlist");
    }
}