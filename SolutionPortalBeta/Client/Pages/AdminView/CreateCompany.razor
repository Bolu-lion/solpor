@page "/createcompany"
@using SolutionPortalBeta.Shared
@inject HttpClient Http
@inject NavigationManager nav
@inject IJSRuntime JsRuntime
@inject IDepartmentService DepartmentService
@inject ICompanyService CompanyService

<div class="modal-container @modalDisplay">
    <div class="modal">
        <div class="modal-content">
            <div class="closebtn">
                <span class="material-symbols-rounded" @onclick="CloseModal"> close </span>
            </div>
            <div class="modal-header">
                <h3>Create Company</h3>
            </div>
            <div class="modal-main">
                <div class="modal-res">
                   <label for="name">Company Name:</label>
                <input type="text" id="name" class="form-control" @bind="company.Name"/>
                </div>
                <div class="modal-res">
                   <label for="name">Company Alias:</label>
                <input type="text" id="alias" class="form-control" @bind="company.Alias" />
                </div>
                <button @onclick="CreateCompanyx">Create Company</button>
            </div>
        </div>
    </div>
</div>

@code {
    private CompanyModel company = new CompanyModel();
    public DepartmentModel department = new DepartmentModel();
    private string departmentName = "";
    private string departmentAlias = "";
    Dictionary<string, string> Departments = new Dictionary<string, string>();
    protected override async Task OnInitializedAsync()
    {
        ShowModal();
    }
    private string modalDisplay = "none";
    private void ShowModal()
    {
        modalDisplay = "block";
    }
    private void CloseModal()
    {
        modalDisplay = "none";
        nav.NavigateTo("/companies");
    }
    private void AddDepartment()
    {
        if (!string.IsNullOrWhiteSpace(departmentName) && !string.IsNullOrWhiteSpace(departmentAlias))
        {
            Departments.Add(departmentName, departmentAlias);
            department.Name = departmentName;
            department.UserName = departmentAlias;
            company.Departments.Add(department);
        }
        departmentName = "";
        departmentAlias = "";
    }

    private async Task CreateCompanyx()
    {
        CloseModal();
        await CompanyService.CreateCompany(company);
        
        if (company?.id > 0)
        {
            //foreach (var dept in Departments)
            //{
            //    department.CompanyId = company.id;
            //    department.Name = dept.Key;
            //    department.UserName = dept.Value;
            //    await DepartmentService.AddDepartment(department);
            //}
            await JsRuntime.InvokeVoidAsync("alert", "Sent Successfully!");
        }
    }
}
