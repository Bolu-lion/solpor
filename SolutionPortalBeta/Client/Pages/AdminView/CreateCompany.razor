@page "/createcompany"
@using SolutionPortalBeta.Shared
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject IDepartmentService DepartmentService
@inject ICompanyService CompanyService

@*<div class="containerr">
    <div class="top bckgmt"><div class="title">Register Company</div></div>
    <div class="main">
        <div>
            <label for="companyName">Company Name</label>
            <input type="text"
                   name="companyName"
                   id=""
                   placeholder="Enter company name" @bind="rre"/>
        </div>
        <div>
            <label for="companyName">Company Alias</label>
            <input type="text"
                   name="companyAlias"
                   id=""
                   placeholder="Enter company alias" @bind="company.Alias" />
        </div>
        <label for="companyName">Department Name</label>
        <div class="inpttxt">
            <input type="text"
                   name="companyName"
                   id=""
                   placeholder="Enter department name"
            @bind="department.Name" />
            <input type="text"
                   name="companyName"
                   id=""
                   placeholder="Enter department username"
            @bind="department.UserName" />
            <div class="button">
                <button class="bckgmt" @onclick="SaveDept">Add</button>
            </div>
        </div>
    </div>
    <div class="button">
        <button class="bckgmt" @onclick="Save">Submit</button>
    </div>
</div>*@

<h1>Create Company</h1>

<EditForm Model="@company" OnValidSubmit="CreateCompanyx">
    <!-- Company information fields -->
    <div class="form-group">
        <label for="name">Company Name:</label>
        <InputText id="name" @bind-Value="company.Name" class="form-control" />
    </div>
    <div class="form-group">
        <label for="name">Company Alias:</label>
        <InputText id="name" @bind-Value="company.Alias" class="form-control" />
    </div>

    <!-- Department input fields -->
    <h3>Departments</h3>
    <div class="form-group">
        <label for="departmentName">Department Name:</label>
        <InputText id="departmentName" @bind-Value="departmentName" class="form-control" />
    </div>
    <div class="form-group">
        <label for="departmentName">Department Username:</label>
        <InputText id="departmentName" @bind-Value="departmentAlias" class="form-control" />
    </div>

    <button type="button" class="btn btn-primary" @onclick="AddDepartment">Add Department</button>

    <ul>
        @foreach (var department in Departments.Keys)
        {
            <li>@department</li>
        }
    </ul>

    <button type="submit" class="btn btn-success">Create Company</button>
</EditForm>

@code {
    private CompanyModel company = new CompanyModel();
    public DepartmentModel department = new DepartmentModel();
    private string departmentName = "";
    private string departmentAlias = "";
    Dictionary<string, string> Departments = new Dictionary<string, string>();

    private void AddDepartment()
    {
        if (!string.IsNullOrWhiteSpace(departmentName) && !string.IsNullOrWhiteSpace(departmentAlias))
        {     
            Departments.Add(departmentName, departmentAlias);
            department.Name = departmentName;
            department.UserName = departmentAlias;
            company.Departments.Add(department);
            
        }
        departmentName = "";
        departmentAlias = "";
    }

    private async Task CreateCompanyx()
    {
         CompanyService.CreateCompany(company);
        if (company?.id > 0)
        {
            foreach (var dept in Departments)
            {
                department.CompanyId = company.id;
                department.Name = dept.Key;
                department.UserName = dept.Value;
                await DepartmentService.AddDepartment(department);
            }
            await JsRuntime.InvokeVoidAsync("alert", "Sent Successfully!");
        }
       
    }
}


@*@code {
    CompanyModel company = new CompanyModel()
    public DepartmentModel department = new DepartmentModel();
    public static string? rre;
    protected override async Task OnInitializedAsync()
    {
    }
    protected async Task Save()
    {
        if(company != null)
        {
            company.Name = rre;
            await JsRuntime.InvokeVoidAsync("alert", rre);
            await JsRuntime.InvokeVoidAsync("alert", "oga e work!");
            await CompanyService.CreateCompany(company);
        }
        else{
            await JsRuntime.InvokeVoidAsync("alert", "oga e no work!");
        }
    }
    protected async Task SaveDept()
    {
        if (department != null)
        {
            await DepartmentService.AddDepartment(department);
            await JsRuntime.InvokeVoidAsync("alert", "department added");
        }
    }
}*@
