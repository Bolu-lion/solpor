@page "/home"
@using SolutionPortalBeta.Shared
@inject NavigationManager _nav
@inject HttpClient _httpClient

<div class="main">
    <Nav />
    <div class="section">
        <div class="search">
            <input type="text" placeholder="Search " />
            <span class="material-symbols-rounded">search</span>
        </div>
    </div>
    <div class="main-container">
        <div class="article-container">
            <h1>FAQs</h1>
            <div class="articles">
                @if (fAQs.Count == 0)
                {
                    <p>Loading</p>
                }
                else
                {
                    @foreach (var faq in fAQs.OrderBy(faq => faq.Id))
                    {
                        <div class="article">
                            <a href="/post/@faq.Id">
                                <h2>
                                    @faq.Title
                                </h2>
                            </a>
                        </div>
                    }
                    <a href="/faq">Show all</a>
                }
                
            </div>
        </div>
        <div class="recent-con">
            <h1>Recent Complaints</h1>
            <div class="recents">
                @if (complaintList.Count == 0)
                {
                    <p>Loading</p>
                }else{
                    @foreach (var p in complaintList.OrderByDescending(p => p.Id).Take(5))
                    {
                        <div class="recent">
                            <div class="recent-head">
                                <span class="time">
                                    @p.DateCreated
                                </span>
                                <small class="status-pending">
                                    @CheckStatus(p.IsCompleted)
                                </small>
                            </div>
                            <h3>@p.Title</h3>
                        </div>
                    }
                }
                
            </div>
        </div>
    </div>
</div>

@code {
    List<FAQModel> fAQs = new List<FAQModel>();
    List<UserCompliantModel> complaintList = new List<UserCompliantModel>();
    private void navToForm()
    {
        _nav.NavigateTo("/logform");
    }
    private void navToFaqs()
    {
        _nav.NavigateTo("/faq");
    }

    protected override async Task OnInitializedAsync()
    {
        var response = await _httpClient.GetAsync("api/Faq/");
        fAQs = await response.Content.ReadFromJsonAsync<List<FAQModel>>();
        await Task.Delay(3000);
        var uresponse = await _httpClient.GetAsync("api/UserComplaint/");
        complaintList = await uresponse.Content.ReadFromJsonAsync<List<UserCompliantModel>>();
    }

    public async void fetchComplaints()
    {
        var response = await _httpClient.GetAsync("api/UserComplaint/");
        complaintList = await response.Content.ReadFromJsonAsync<List<UserCompliantModel>>();
    }
    
    private string CheckStatus(bool Status)
    {
        if (Status)
        {
            return "Resolved";
        }
        else
        {
            return "Pending";
        }
    }

    public string? inputString { get; set; }

    private List<string> documents = new List<string>()
    {
        "How to create a new customer",
        "How to generate payment",
        "Show all actions on an item",
        "Check history on an item",
        "How to make sales order"
    };
}